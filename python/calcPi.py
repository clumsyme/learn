"""
Calculate PI with David H. Bailey's infinite series.
ref: http://crd-legacy.lbl.gov/~dhbailey/dhbpapers/digits.pdf
"""

from decimal import Decimal, getcontext

# The Pi with prec of 1001.
PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989'

def calcpi(p, n):
    """Get pi with prec of p, the i of the infinite series is up to n"""
    getcontext().prec = p
    pi = Decimal(0)
    i = 0
    while i < n:
        pi += Decimal(1) * \
            (Decimal(4)/Decimal(8*i+1) - Decimal(2)/Decimal(8*i+4) - Decimal(1)/Decimal(8*i+5) - Decimal(1)/Decimal(8*i+6)) / \
            Decimal(16**i)
        i += 1
    return pi

i = 0
while True:
    if str(calcpi(1001, i)) == PI:
        print(i)
        break
    else:
        i += 1
# We get pi with precision of 1001 equals to the PI when i == 826.
# -->826